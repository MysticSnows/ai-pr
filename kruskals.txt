# Kruskal's algorithm for undirected and weighted graph


class Graph:

	def __init__(self, vertices):
		self.V = vertices
		self.graph = []


	def addEdge(self, u, v, w):
		self.graph.append([u, v, w])


	def find(self, parent, i):
		if parent[i] != i:    # If current vertex is not parent
    # path compression
			parent[i] = self.find(parent, parent[i])   # find parent of current vertex
		return parent[i]


	def union(self, parent, rank, x, y):
		# Attach smaller rank tree under root of
		# high rank tree (Union by Rank)
		if rank[x] < rank[y]:
			parent[x] = y
		elif rank[x] > rank[y]:
			parent[y] = x

		# If ranks are same, make either as root
		# and increment its rank by one
		else:
			parent[y] = x
			rank[x] += 1

	# construct MST
	def KruskalMST(self):

		# resultant MST
		result = []

		# index variables: 
    # i - for sorted edges
		# e - for result[]
		i,e = 0,0

		# Sort all the edges in
		# increasing order of weights
		self.graph = sorted(self.graph,
							key=lambda item: item[2]) # item[2] in (u,v,weight) is weight

		parent = []
		rank = []

		# initially each node is its own parent & rank set to 0
		for node in range(self.V):
			parent.append(node)
			rank.append(0)


		while e < self.V - 1:

			# Pick the smallest edge and increment
			# the index for next iteration
			u, v, w = self.graph[i]
			i = i + 1 # move to nxt edge
			x = self.find(parent, u)
			y = self.find(parent, v)

			
			if x != y:    # curr edge gives no cycle
				e = e + 1
				result.append([u, v, w])
				self.union(parent, rank, x, y)
			# else discard edge

		minimumCost = 0
		print("Edges in the constructed MST")
		for u, v, weight in result:
			minimumCost += weight
			print("%d -- %d == %d" % (u, v, weight))
		print("Minimum Spanning Tree", minimumCost)


# Driver code
if __name__ == '__main__':
	g = Graph(4)
	g.addEdge(0, 1, 8)
	g.addEdge(0, 2, 9)
	g.addEdge(0, 3, 4)
	g.addEdge(1, 3, 12)
	g.addEdge(2, 3, 14)

	# Function call
	g.KruskalMST()


import sys 

class Graph():

	def __init__(self, vertices):
		self.V = vertices
		self.graph = [[0 for column in range(vertices)]
					for row in range(vertices)]

	
	def printMST(self, parent):
		print ("Edge \tWeight")
		for i in range(1, self.V):
			print (parent[i], "-", i, "\t", self.graph[i][parent[i]])

	# to find the vertex with
	# minimum distance value, from the set of vertices
	# not yet included in shortest path tree
	def minKey(self, key, mstSet):

		
		min = sys.maxsize

		for v in range(self.V):
			if key[v] < min and mstSet[v] == False:
				min = key[v]
				min_index = v

		return min_index

	# construct & print MST
	def primMST(self):

		# Key values used to pick minimum weight edge
		key = [sys.maxsize] * self.V
		key[0] = 0								# picked as first vertex

		parent = [None] * self.V 	# constructed MST
		parent[0] = -1 						# First node - root
		
		mstSet = [False] * self.V

		for cnt in range(self.V):

			# min distance vertex
			u = self.minKey(key, mstSet)

			# mark u in mst
			mstSet[u] = True

			# if the 'current distance > new distance' and
			# vertex not in MST
			# Update dist value of the adjacent vertices of the picked vertex 
			for v in range(self.V):
				# graph[u][v] is non zero only for adjacent vertices of m
				# mstSet[v] == false for vertices not yet included in MST
				# Update key only if 'graph[u][v] < key[v]'
				if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
						key[v] = self.graph[u][v]
						parent[v] = u

		self.printMST(parent)

g = Graph(5)
g.graph = [ [0, 2, 0, 6, 0],
			[2, 0, 3, 8, 5],
			[0, 3, 0, 0, 7],
			[6, 8, 0, 0, 9],
			[0, 5, 7, 9, 0]]

g.primMST();

graph = {	// adj list
  'A' : ['B','C'],
  'B' : ['D', 'E'],
  'C' : ['F'],
  'D' : [],
  'E' : ['F'],
  'F' : []
}

visited = [] # List to keep track of visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node):
  visited.append(node)
  queue.append(node)

  while queue:
    s = queue.pop(0) 
    print (s, end = " ") 

    for neighbour in graph[s]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
bfs(visited, graph, 'A')

'''
visited = []
queue = []

def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)

    while queue:
        s = queue.pop(0)
        print(s, end=" ")

        for neighbour in graph[s]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

# Driver Code
graph = {}

num_nodes = int(input("Enter the number of nodes in the graph: "))

# Taking input for each node and its neighbors
for _ in range(num_nodes):
    node = input("Enter a node: ")
    neighbours = input("Enter neighbours of {}: ".format(node)).split()
    graph[node] = neighbours

start_node = input("Enter the starting node for BFS: ")
bfs(visited, graph, start_node)
'''